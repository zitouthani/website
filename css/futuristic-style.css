<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0" />
<title>Robot Flottant sur la 2áµ‰ Vue</title>
<style>
/* === PremiÃ¨re section === */
#robot-section {
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  background-image: radial-gradient(#04f, #000);
  color: white;
  font-size: 2rem;
}

/* === DeuxiÃ¨me section === */
#second-section {
  min-height: 100vh;
  background: #f0f0f0;
  display: flex;
  justify-content: center;
  align-items: center;
  color: #333;
  font-size: 2rem;
}

/* === Canvas du robot flottant === */
#floating-robot {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 999;
  opacity: 0; /* invisible au dÃ©part */
  transition: opacity 1.5s ease; /* effet fluide */
}
</style>
</head>
<body>

<!-- === 1Ã¨re vue === -->
<section id="robot-section">
  <h1>PremiÃ¨re vue ðŸ‘‹</h1>
</section>

<!-- === 2áµ‰ vue === -->
<section id="second-section">
  <h1>DeuxiÃ¨me vue â€” le robot apparaÃ®t ici ðŸ¤–</h1>
</section>

<!-- === Canvas du robot flottant === -->
<canvas id="floating-robot"></canvas>

<script>
const canvas = document.getElementById('floating-robot');
const ctx = canvas.getContext('2d');
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// Image du robot
const robotImage = new Image();
robotImage.src = 'https://raw.githubusercontent.com/zitouthani/website/main/robot.png';

// Classe Robot
class Robot {
  constructor() {
    this.reset();
  }
  reset() {
    this.x = Math.random() * canvas.width;
    this.y = Math.random() * canvas.height;
    this.size = 100 + Math.random() * 100; // ðŸ”¹ plus grand
    this.speedX = (Math.random() - 0.5) * 1.2;
    this.speedY = (Math.random() - 0.5) * 1.2;
    this.opacity = 0.04 + Math.random() * 0.05; // ðŸ”¹ transparent
  }
  draw() {
    ctx.globalAlpha = this.opacity;
    ctx.drawImage(robotImage, this.x, this.y, this.size, this.size);
    ctx.globalAlpha = 1;
  }
  update() {
    this.x += this.speedX;
    this.y += this.speedY;
    if (this.x < 0 || this.x > canvas.width - this.size) this.speedX *= -1;
    if (this.y < 0 || this.y > canvas.height - this.size) this.speedY *= -1;
  }
}

const robots = [];
for (let i = 0; i < 3; i++) robots.push(new Robot());

function animate() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  robots.forEach(r => { r.update(); r.draw(); });
  requestAnimationFrame(animate);
}

robotImage.onload = animate;

// Redimensionnement
window.addEventListener('resize', () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
});

// âœ… Observer la 2áµ‰ section
const observer = new IntersectionObserver(
  entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        // Quand la 2áµ‰ section devient visible
        canvas.style.opacity = '1';
      } else {
        // Quand elle nâ€™est plus visible
        canvas.style.opacity = '0';
      }
    });
  },
  { threshold: 0.4 } // dÃ©clenche quand ~40% est visible
);

observer.observe(document.getElementById('second-section'));
</script>

</body>
</html>
